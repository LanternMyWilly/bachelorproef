{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class Service {\n  constructor(http) {\n    this.http = http;\n    this.url = `${environment.apiEndpoint}`;\n  }\n  loadItemsCount() {\n    let url = `${this.url}/items/count`;\n    return this.http.get(url).pipe(map(response => {\n      return response;\n    }));\n  }\n  loadUsersCount() {\n    let url = `${this.url}/users/count`;\n    return this.http.get(url).pipe(map(response => {\n      return response;\n    }));\n  }\n  loadHighestTotalUser() {\n    let url = `${this.url}/users/highesttotaluser`;\n    return this.http.get(url).pipe(map(response => {\n      return response;\n    }));\n  }\n  loadItems() {\n    let url = `${this.url}/items/all`;\n    return this.http.get(url).pipe(map(response => {\n      return response;\n    }));\n  }\n  loadRandomQuote() {\n    let url = 'https://api.quotable.io/random?minLength=140';\n    return this.http.get(url).pipe(map(response => {\n      return response.content;\n    }));\n  }\n  addItem(item) {\n    let url = `${this.url}/items`;\n    return this.http.put(url, {\n      user: updatedUser\n    }).pipe(map(response => {\n      localStorage.setItem(USER, JSON.stringify(response.data));\n      return response.data.data;\n    }));\n  }\n}\nService.ɵfac = function Service_Factory(t) {\n  return new (t || Service)(i0.ɵɵinject(i1.HttpClient));\n};\nService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Service,\n  factory: Service.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,QAAQ,8BAA8B;AAE1D,SAASC,GAAG,QAAoB,MAAM;;;AAOtC,OAAM,MAAOC,OAAO;EAGlBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,QAAG,GAAW,GAAGJ,WAAW,CAACK,WAAW,EAAE;EAEX;EAEvCC,cAAc;IACZ,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,cAAc;IACnC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAACD,GAAG,CAAC,CAACE,IAAI,CAC5BR,GAAG,CAAES,QAAa,IAAI;MACpB,OAAOA,QAAQ;IACjB,CAAC,CAAC,CACH;EACH;EAEAC,cAAc;IACZ,IAAIJ,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,cAAc;IACnC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAACD,GAAG,CAAC,CAACE,IAAI,CAC5BR,GAAG,CAAES,QAAa,IAAI;MACpB,OAAOA,QAAQ;IACjB,CAAC,CAAC,CACH;EACH;EAEAE,oBAAoB;IAClB,IAAIL,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,yBAAyB;IAC9C,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAACD,GAAG,CAAC,CAACE,IAAI,CAC5BR,GAAG,CAAES,QAAa,IAAI;MACpB,OAAOA,QAAQ;IACjB,CAAC,CAAC,CACH;EACH;EAEAG,SAAS;IACP,IAAIN,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,YAAY;IACjC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAACD,GAAG,CAAC,CAACE,IAAI,CAC5BR,GAAG,CAAES,QAAa,IAAI;MACpB,OAAOA,QAAQ;IACjB,CAAC,CAAC,CACH;EACH;EAEAI,eAAe;IACb,IAAIP,GAAG,GAAG,8CAA8C;IACxD,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAACD,GAAG,CAAC,CAACE,IAAI,CAC5BR,GAAG,CAAES,QAAa,IAAI;MACpB,OAAOA,QAAQ,CAACK,OAAO;IACzB,CAAC,CAAC,CACH;EACH;EAEAC,OAAO,CAACC,IAAU;IAChB,IAAIV,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,QAAQ;IAC7B,OAAO,IAAI,CAACH,IAAI,CAACc,GAAG,CAACX,GAAG,EAAE;MAAEY,IAAI,EAAEC;IAAW,CAAE,CAAC,CAACX,IAAI,CACnDR,GAAG,CAAES,QAAa,IAAI;MACpBW,YAAY,CAACC,OAAO,CAACC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,QAAQ,CAACgB,IAAI,CAAC,CAAC;MACzD,OAAOhB,QAAQ,CAACgB,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,CACH;EACH;;AA1DWxB,OAAO;mBAAPA,OAAO;AAAA;AAAPA,OAAO;SAAPA,OAAO;EAAAyB,SAAPzB,OAAO;EAAA0B,YAFN;AAAM","names":["environment","map","Service","constructor","http","apiEndpoint","loadItemsCount","url","get","pipe","response","loadUsersCount","loadHighestTotalUser","loadItems","loadRandomQuote","content","addItem","item","put","user","updatedUser","localStorage","setItem","USER","JSON","stringify","data","factory","providedIn"],"sourceRoot":"","sources":["/Users/florianserneels/Documents/PutridGrove/Angular/putrid-grove-angular/src/app/services/service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { map, Observable } from 'rxjs';\nimport User from '../models/user';\nimport Item from '../models/item';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class Service {\n  private url: string = `${environment.apiEndpoint}`;\n\n  constructor(private http: HttpClient) {}\n\n  loadItemsCount(): Observable<number> {\n    let url = `${this.url}/items/count`;\n    return this.http.get(url).pipe(\n      map((response: any) => {\n        return response;\n      })\n    );\n  }\n\n  loadUsersCount(): Observable<number> {\n    let url = `${this.url}/users/count`;\n    return this.http.get(url).pipe(\n      map((response: any) => {\n        return response;\n      })\n    );\n  }\n\n  loadHighestTotalUser(): Observable<string> {\n    let url = `${this.url}/users/highesttotaluser`;\n    return this.http.get(url).pipe(\n      map((response: any) => {\n        return response;\n      })\n    );\n  }\n\n  loadItems(): Observable<any> {\n    let url = `${this.url}/items/all`;\n    return this.http.get(url).pipe(\n      map((response: any) => {\n        return response;\n      })\n    );\n  }\n\n  loadRandomQuote(): Observable<string> {\n    let url = 'https://api.quotable.io/random?minLength=140';\n    return this.http.get(url).pipe(\n      map((response: any) => {\n        return response.content;\n      })\n    );\n  }\n\n  addItem(item: Item): Observable<any> {\n    let url = `${this.url}/items`;\n    return this.http.put(url, { user: updatedUser }).pipe(\n      map((response: any) => {\n        localStorage.setItem(USER, JSON.stringify(response.data));\n        return response.data.data;\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}