{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport ItemRequest from 'src/app/models/itemRequest';\nlet ItemsComponent = class ItemsComponent {\n  constructor(service, fb) {\n    this.service = service;\n    this.fb = fb;\n    this.items = [];\n    this.itemForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(5)]],\n      description: ['', [Validators.required, Validators.minLength(10)]],\n      price: ['', [Validators.required, Validators.min(1)]],\n      isShared: [false]\n    });\n    this.validationMessages = {\n      name: {\n        required: 'That name is too short'\n      },\n      description: {\n        length: 'The provided description is too short'\n      },\n      price: {\n        length: \"Price can't be empty\",\n        nan: \"That's not a correct price format\"\n      }\n    };\n    this.formErrors = {\n      name: '',\n      description: '',\n      price: ''\n    };\n  }\n  onSubmit() {\n    this.handleAddItem();\n  }\n  handleAddItem() {\n    this.logValidationErrors();\n    console.log(this.itemForm.value.name);\n    if (this.itemForm.valid) {\n      const name = !!this.itemForm.value.name ? this.itemForm.value.name : '';\n      const description = !!this.itemForm.value.description ? this.itemForm.value.description : '';\n      const price = !!this.itemForm.value.price ? +this.itemForm.value.price : 0;\n      const isShared = !!this.itemForm.value.isShared ? this.itemForm.value.isShared : false;\n      const isPayedOff = false;\n      const iconPath = 'default';\n      const payedById = '00000000-0000-0000-0000-000000000001';\n      let item = new ItemRequest(name, description, price, iconPath, isShared, isPayedOff, payedById);\n      this.service.addItem(item).subscribe({\n        next: () => {\n          this.itemForm.reset();\n          this.ngOnInit;\n        }\n      });\n    }\n  }\n  logValidationErrors(group = this.itemForm) {\n    // get all root keys\n    Object.keys(group.controls).forEach(key => {\n      const abstractControl = group.get(key);\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n        // @ts-ignore\n        this.formErrors[key] = '';\n        if (abstractControl && !abstractControl.valid && (abstractControl.touched || abstractControl.dirty)) {\n          // @ts-ignore\n          const messages = this.validationMessages[key];\n          for (const errorKey in abstractControl.errors) {\n            if (errorKey) {\n              // @ts-ignore\n              this.formErrors[key] += messages[errorKey] + ' ';\n            }\n          }\n        }\n      }\n    });\n  }\n  ngOnInit() {\n    this.service.loadItems().subscribe({\n      next: res => {\n        console.log(res);\n        res.forEach((c, index) => {\n          if (index !== 0) {\n            console.log(c);\n            this.items.push(c);\n          }\n        });\n      }\n    });\n  }\n};\nItemsComponent = __decorate([Component({\n  selector: 'app-items',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.css']\n})], ItemsComponent);\nexport { ItemsComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","Validators","ItemRequest","ItemsComponent","constructor","service","fb","group","name","required","minLength","description","price","min","isShared","length","nan","onSubmit","handleAddItem","logValidationErrors","console","log","itemForm","value","valid","isPayedOff","iconPath","payedById","item","addItem","subscribe","next","reset","ngOnInit","Object","keys","controls","forEach","key","abstractControl","get","formErrors","touched","dirty","messages","validationMessages","errorKey","errors","loadItems","res","c","index","items","push","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/florianserneels/Documents/PutridGrove/Angular/putrid-grove-angular/src/app/components/items/items.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport Item from 'src/app/models/item';\nimport { Service } from 'src/app/services/service';\nimport { ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport User from 'src/app/models/user';\nimport ItemRequest from 'src/app/models/itemRequest';\n\n@Component({\n  selector: 'app-items',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.css'],\n})\nexport class ItemsComponent implements OnInit {\n  public items: Item[] = [];\n\n  constructor(public service: Service, private fb: FormBuilder) {}\n\n  itemForm = this.fb.group({\n    name: ['', [Validators.required, Validators.minLength(5)]],\n    description: ['', [Validators.required, Validators.minLength(10)]],\n    price: ['', [Validators.required, Validators.min(1)]],\n    isShared: [false],\n  });\n\n  onSubmit(): void {\n    this.handleAddItem();\n  }\n\n  handleAddItem() {\n    this.logValidationErrors();\n\n    console.log(this.itemForm.value.name);\n\n    if (this.itemForm.valid) {\n      const name = !!this.itemForm.value.name ? this.itemForm.value.name! : '';\n      const description = !!this.itemForm.value.description\n        ? this.itemForm.value.description!\n        : '';\n      const price = !!this.itemForm.value.price\n        ? +this.itemForm.value.price!\n        : 0;\n      const isShared = !!this.itemForm.value.isShared\n        ? this.itemForm.value.isShared!\n        : false;\n      const isPayedOff = false;\n      const iconPath = 'default';\n      const payedById = '00000000-0000-0000-0000-000000000001';\n\n      let item = new ItemRequest(\n        name,\n        description,\n        price,\n        iconPath,\n        isShared,\n        isPayedOff,\n        payedById\n      );\n\n      this.service.addItem(item).subscribe({\n        next: () => {\n          this.itemForm.reset();\n          this.ngOnInit;\n        },\n      });\n    }\n  }\n\n  logValidationErrors(group: FormGroup = this.itemForm): void {\n    // get all root keys\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n        // @ts-ignore\n        this.formErrors[key] = '';\n        if (\n          abstractControl &&\n          !abstractControl.valid &&\n          (abstractControl.touched || abstractControl.dirty)\n        ) {\n          // @ts-ignore\n          const messages = this.validationMessages[key];\n          for (const errorKey in abstractControl.errors) {\n            if (errorKey) {\n              // @ts-ignore\n              this.formErrors[key] += messages[errorKey] + ' ';\n            }\n          }\n        }\n      }\n    });\n  }\n\n  validationMessages = {\n    name: {\n      required: 'That name is too short',\n    },\n    description: {\n      length: 'The provided description is too short',\n    },\n    price: {\n      length: \"Price can't be empty\",\n      nan: \"That's not a correct price format\",\n    },\n  };\n  formErrors = {\n    name: '',\n    description: '',\n    price: '',\n  };\n\n  ngOnInit(): void {\n    this.service.loadItems().subscribe({\n      next: (res) => {\n        console.log(res);\n        res.forEach((c: any, index: number) => {\n          if (index !== 0) {\n            console.log(c);\n            this.items.push(c);\n          }\n        });\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}