{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport ItemRequest from 'src/app/models/itemRequest';\nlet ItemsComponent = class ItemsComponent {\n  constructor(service, fb) {\n    this.service = service;\n    this.fb = fb;\n    this.items = [];\n    this.itemForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(5)]],\n      description: ['', [Validators.required, Validators.minLength(10)]],\n      price: ['', [Validators.required, Validators.pattern('^[0-9]{1,3}([.][0-9]{1,2})?$')]],\n      isShared: [false]\n    });\n    this.validationMessages = {\n      name: {\n        required: \"Name can't be empty\",\n        minlength: 'That name is too short'\n      },\n      description: {\n        required: \"Description can't be empty\",\n        minlength: 'The provided description is too short'\n      },\n      price: {\n        required: \"Price can't be empty\",\n        pattern: \"That's not a correct price format\"\n      }\n    };\n    this.formErrors = {\n      name: '',\n      description: '',\n      price: ''\n    };\n  }\n  onSubmit() {\n    this.handleAddItem();\n  }\n  handleAddItem() {\n    this.logValidationErrors();\n    if (this.itemForm.valid) {\n      const name = !!this.itemForm.value.name ? this.itemForm.value.name : '';\n      const description = !!this.itemForm.value.description ? this.itemForm.value.description : '';\n      const price = !!this.itemForm.value.price ? +this.itemForm.value.price : 0;\n      const isShared = !!this.itemForm.value.isShared ? this.itemForm.value.isShared : false;\n      const isPayedOff = false;\n      const iconPath = 'default';\n      const payedById = '00000000-0000-0000-0000-000000000001';\n      let item = new ItemRequest(name, description, price, iconPath, isShared, isPayedOff, payedById);\n      this.service.addItem(item).subscribe({\n        next: () => {\n          this.closebutton.nativeElement.click();\n          this.itemForm.reset();\n          this.ngOnInit();\n        }\n      });\n    }\n  }\n  logValidationErrors(group = this.itemForm) {\n    // get all root keys\n    Object.keys(group.controls).forEach(key => {\n      const abstractControl = group.get(key);\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n        // @ts-ignore\n        this.formErrors[key] = '';\n        if (abstractControl && !abstractControl.valid) {\n          // @ts-ignore\n          const messages = this.validationMessages[key];\n          for (const errorKey in abstractControl.errors) {\n            if (errorKey) {\n              // @ts-ignore\n              this.formErrors[key] += messages[errorKey] + ' ';\n            }\n          }\n        }\n      }\n    });\n  }\n  ngOnInit() {\n    this.items = [];\n    this.service.loadItems().subscribe({\n      next: res => {\n        res.forEach((c, index) => {\n          if (index !== 0) {\n            this.items.push(c);\n          }\n        });\n      }\n    });\n  }\n};\n__decorate([ViewChild('closebutton')], ItemsComponent.prototype, \"closebutton\", void 0);\nItemsComponent = __decorate([Component({\n  selector: 'app-items',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.css']\n})], ItemsComponent);\nexport { ItemsComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","FormGroup","Validators","ItemRequest","ItemsComponent","constructor","service","fb","group","name","required","minLength","description","price","pattern","isShared","minlength","onSubmit","handleAddItem","logValidationErrors","itemForm","valid","value","isPayedOff","iconPath","payedById","item","addItem","subscribe","next","closebutton","nativeElement","click","reset","ngOnInit","Object","keys","controls","forEach","key","abstractControl","get","formErrors","messages","validationMessages","errorKey","errors","items","loadItems","res","c","index","push","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/florianserneels/Documents/PutridGrove/Angular/putrid-grove-angular/src/app/components/items/items.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\nimport Item from 'src/app/models/item';\nimport { Service } from 'src/app/services/service';\nimport { ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport User from 'src/app/models/user';\nimport ItemRequest from 'src/app/models/itemRequest';\n\n@Component({\n  selector: 'app-items',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.css'],\n})\nexport class ItemsComponent implements OnInit {\n  @ViewChild('closebutton') closebutton: any;\n  public items: Item[] = [];\n\n  constructor(public service: Service, private fb: FormBuilder) {}\n\n  itemForm = this.fb.group({\n    name: ['', [Validators.required, Validators.minLength(5)]],\n    description: ['', [Validators.required, Validators.minLength(10)]],\n    price: [\n      '',\n      [Validators.required, Validators.pattern('^[0-9]{1,3}([.][0-9]{1,2})?$')],\n    ],\n    isShared: [false],\n  });\n\n  onSubmit(): void {\n    this.handleAddItem();\n  }\n\n  handleAddItem() {\n    this.logValidationErrors();\n\n    if (this.itemForm.valid) {\n      const name = !!this.itemForm.value.name ? this.itemForm.value.name! : '';\n      const description = !!this.itemForm.value.description\n        ? this.itemForm.value.description!\n        : '';\n      const price = !!this.itemForm.value.price\n        ? +this.itemForm.value.price!\n        : 0;\n      const isShared = !!this.itemForm.value.isShared\n        ? this.itemForm.value.isShared!\n        : false;\n      const isPayedOff = false;\n      const iconPath = 'default';\n      const payedById = '00000000-0000-0000-0000-000000000001';\n\n      let item = new ItemRequest(\n        name,\n        description,\n        price,\n        iconPath,\n        isShared,\n        isPayedOff,\n        payedById\n      );\n\n      this.service.addItem(item).subscribe({\n        next: () => {\n          this.closebutton.nativeElement.click()\n          this.itemForm.reset();\n          this.ngOnInit();\n        },\n      });\n    }\n  }\n\n  logValidationErrors(group: FormGroup = this.itemForm): void {\n    // get all root keys\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n        // @ts-ignore\n        this.formErrors[key] = '';\n        if (abstractControl && !abstractControl.valid) {\n          // @ts-ignore\n          const messages = this.validationMessages[key];\n\n          for (const errorKey in abstractControl.errors) {\n            if (errorKey) {\n              // @ts-ignore\n              this.formErrors[key] += messages[errorKey] + ' ';\n            }\n          }\n        }\n      }\n    });\n  }\n\n  validationMessages = {\n    name: {\n      required: \"Name can't be empty\",\n      minlength: 'That name is too short',\n    },\n    description: {\n      required: \"Description can't be empty\",\n      minlength: 'The provided description is too short',\n    },\n    price: {\n      required: \"Price can't be empty\",\n      pattern: \"That's not a correct price format\",\n    },\n  };\n  formErrors = {\n    name: '',\n    description: '',\n    price: '',\n  };\n\n  ngOnInit(): void {\n    this.items = [];\n\n    this.service.loadItems().subscribe({\n      next: (res) => {\n        res.forEach((c: any, index: number) => {\n          if (index !== 0) {\n            this.items.push(c);\n          }\n        });\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}